
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador.Default.Compiler;

import java_cup.runtime.Symbol;
import java.util.Stack;
import org.json.JSONObject;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\002\000\002\004" +
    "\005\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\006\005\000\002\006\006\000\002\006\005\000" +
    "\002\006\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\010\003\000\002\010" +
    "\003\000\002\073\006\000\002\074\003\000\002\074\002" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\005\000\002\015\007\000\002\075\010\000" +
    "\002\075\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\002\000\002\017" +
    "\007\000\002\020\007\000\002\021\007\000\002\022\006" +
    "\000\002\023\006\000\002\024\006\000\002\025\006\000" +
    "\002\026\007\000\002\027\003\000\002\027\002\000\002" +
    "\030\006\000\002\031\007\000\002\032\007\000\002\033" +
    "\004\000\002\033\004\000\002\034\005\000\002\034\005" +
    "\000\002\034\002\000\002\035\006\000\002\036\006\000" +
    "\002\037\006\000\002\040\006\000\002\041\006\000\002" +
    "\042\007\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\002\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\002\000\002\045\012\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\003\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\051\006\000" +
    "\002\052\005\000\002\053\012\000\002\053\003\000\002" +
    "\054\006\000\002\054\002\000\002\055\012\000\002\056" +
    "\006\000\002\056\002\000\002\100\006\000\002\100\004" +
    "\000\002\076\004\000\002\076\004\000\002\077\003\000" +
    "\002\077\002\000\002\057\007\000\002\057\005\000\002" +
    "\060\015\000\002\061\005\000\002\061\006\000\002\061" +
    "\002\000\002\062\006\000\002\062\007\000\002\062\002" +
    "\000\002\063\006\000\002\063\006\000\002\063\002\000" +
    "\002\064\007\000\002\064\007\000\002\064\002\000\002" +
    "\065\013\000\002\066\011\000\002\067\012\000\002\067" +
    "\002\000\002\070\005\000\002\070\002\000\002\071\006" +
    "\000\002\071\002\000\002\072\003\000\002\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0168\000\004\004\005\001\002\000\004\002\u016a\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\064\010\uffe6\011\050\013" +
    "\036\022\035\023\034\024\024\025\047\026\041\027\045" +
    "\030\014\031\052\032\042\034\072\035\060\036\044\040" +
    "\013\041\057\042\040\043\061\044\070\045\020\053\037" +
    "\060\062\061\055\062\011\001\002\000\004\005\u0164\001" +
    "\002\000\072\010\uffe6\011\050\013\036\022\035\023\034" +
    "\024\024\025\047\026\041\027\045\030\014\031\052\032" +
    "\042\034\072\035\060\036\044\040\013\041\057\042\040" +
    "\043\061\044\070\045\020\053\037\054\uffe6\055\uffe6\057" +
    "\uffe6\060\062\061\055\062\011\001\002\000\004\005\u0160" +
    "\001\002\000\004\005\u015d\001\002\000\072\010\uffe6\011" +
    "\050\013\036\022\035\023\034\024\024\025\047\026\041" +
    "\027\045\030\014\031\052\032\042\034\072\035\060\036" +
    "\044\040\013\041\057\042\040\043\061\044\070\045\020" +
    "\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055\062" +
    "\011\001\002\000\072\010\uffe6\011\050\013\036\022\035" +
    "\023\034\024\024\025\047\026\041\027\045\030\014\031" +
    "\052\032\042\034\072\035\060\036\044\040\013\041\057" +
    "\042\040\043\061\044\070\045\020\053\037\054\uffe6\055" +
    "\uffe6\057\uffe6\060\062\061\055\062\011\001\002\000\004" +
    "\010\u014a\001\002\000\004\005\u0136\001\002\000\072\010" +
    "\uffe6\011\050\013\036\022\035\023\034\024\024\025\047" +
    "\026\041\027\045\030\014\031\052\032\042\034\072\035" +
    "\060\036\044\040\013\041\057\042\040\043\061\044\070" +
    "\045\020\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061" +
    "\055\062\011\001\002\000\072\010\uffe6\011\050\013\036" +
    "\022\035\023\034\024\024\025\047\026\041\027\045\030" +
    "\014\031\052\032\042\034\072\035\060\036\044\040\013" +
    "\041\057\042\040\043\061\044\070\045\020\053\037\054" +
    "\uffe6\055\uffe6\057\uffe6\060\062\061\055\062\011\001\002" +
    "\000\072\010\uffe6\011\050\013\036\022\035\023\034\024" +
    "\024\025\047\026\041\027\045\030\014\031\052\032\042" +
    "\034\072\035\060\036\044\040\013\041\057\042\040\043" +
    "\061\044\070\045\020\053\037\054\uffe6\055\uffe6\057\uffe6" +
    "\060\062\061\055\062\011\001\002\000\004\005\u012f\001" +
    "\002\000\072\010\uffe6\011\050\013\036\022\035\023\034" +
    "\024\024\025\047\026\041\027\045\030\014\031\052\032" +
    "\042\034\072\035\060\036\044\040\013\041\057\042\040" +
    "\043\061\044\070\045\020\053\037\054\uffe6\055\uffe6\057" +
    "\uffe6\060\062\061\055\062\011\001\002\000\072\010\uffe6" +
    "\011\050\013\036\022\035\023\034\024\024\025\047\026" +
    "\041\027\045\030\014\031\052\032\042\034\072\035\060" +
    "\036\044\040\013\041\057\042\040\043\061\044\070\045" +
    "\020\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055" +
    "\062\011\001\002\000\072\010\uffe6\011\050\013\036\022" +
    "\035\023\034\024\024\025\047\026\041\027\045\030\014" +
    "\031\052\032\042\034\072\035\060\036\044\040\013\041" +
    "\057\042\040\043\061\044\070\045\020\053\037\054\uffe6" +
    "\055\uffe6\057\uffe6\060\062\061\055\062\011\001\002\000" +
    "\072\010\uffe6\011\050\013\036\022\035\023\034\024\024" +
    "\025\047\026\041\027\045\030\014\031\052\032\042\034" +
    "\072\035\060\036\044\040\013\041\057\042\040\043\061" +
    "\044\070\045\020\053\037\054\uffe6\055\uffe6\057\uffe6\060" +
    "\062\061\055\062\011\001\002\000\072\010\uffe6\011\050" +
    "\013\036\022\035\023\034\024\024\025\047\026\041\027" +
    "\045\030\014\031\052\032\042\034\072\035\060\036\044" +
    "\040\013\041\057\042\040\043\061\044\070\045\020\053" +
    "\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055\062\011" +
    "\001\002\000\072\010\uffe6\011\050\013\036\022\035\023" +
    "\034\024\024\025\047\026\041\027\045\030\014\031\052" +
    "\032\042\034\072\035\060\036\044\040\013\041\057\042" +
    "\040\043\061\044\070\045\020\053\037\054\uffe6\055\uffe6" +
    "\057\uffe6\060\062\061\055\062\011\001\002\000\072\010" +
    "\uffe6\011\050\013\036\022\035\023\034\024\024\025\047" +
    "\026\041\027\045\030\014\031\052\032\042\034\072\035" +
    "\060\036\044\040\013\041\057\042\040\043\061\044\070" +
    "\045\020\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061" +
    "\055\062\011\001\002\000\004\005\u0124\001\002\000\004" +
    "\005\u0120\001\002\000\006\005\u010a\015\114\001\002\000" +
    "\004\005\360\001\002\000\004\005\355\001\002\000\004" +
    "\005\352\001\002\000\004\005\345\001\002\000\072\010" +
    "\uffe6\011\050\013\036\022\035\023\034\024\024\025\047" +
    "\026\041\027\045\030\014\031\052\032\042\034\072\035" +
    "\060\036\044\040\013\041\057\042\040\043\061\044\070" +
    "\045\020\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061" +
    "\055\062\011\001\002\000\004\005\327\001\002\000\004" +
    "\005\324\001\002\000\072\010\uffe6\011\050\013\036\022" +
    "\035\023\034\024\024\025\047\026\041\027\045\030\014" +
    "\031\052\032\042\034\072\035\060\036\044\040\013\041" +
    "\057\042\040\043\061\044\070\045\020\053\037\054\uffe6" +
    "\055\uffe6\057\uffe6\060\062\061\055\062\011\001\002\000" +
    "\004\005\313\001\002\000\004\013\301\001\002\000\072" +
    "\010\uffe6\011\050\013\036\022\035\023\034\024\024\025" +
    "\047\026\041\027\045\030\014\031\052\032\042\034\072" +
    "\035\060\036\044\040\013\041\057\042\040\043\061\044" +
    "\070\045\020\053\037\054\uffe6\055\uffe6\057\uffe6\060\062" +
    "\061\055\062\011\001\002\000\004\005\275\001\002\000" +
    "\072\010\uffe6\011\050\013\036\022\035\023\034\024\024" +
    "\025\047\026\041\027\045\030\014\031\052\032\042\034" +
    "\072\035\060\036\044\040\013\041\057\042\040\043\061" +
    "\044\070\045\020\053\037\054\uffe6\055\uffe6\057\uffe6\060" +
    "\062\061\055\062\011\001\002\000\072\010\uffe6\011\050" +
    "\013\036\022\035\023\034\024\024\025\047\026\041\027" +
    "\045\030\014\031\052\032\042\034\072\035\060\036\044" +
    "\040\013\041\057\042\040\043\061\044\070\045\020\053" +
    "\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055\062\011" +
    "\001\002\000\004\007\263\001\002\000\072\010\uffe6\011" +
    "\050\013\036\022\035\023\034\024\024\025\047\026\041" +
    "\027\045\030\014\031\052\032\042\034\072\035\060\036" +
    "\044\040\013\041\057\042\040\043\061\044\070\045\020" +
    "\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055\062" +
    "\011\001\002\000\004\005\257\001\002\000\004\005\253" +
    "\001\002\000\004\005\250\001\002\000\004\005\107\001" +
    "\002\000\072\010\uffe6\011\050\013\036\022\035\023\034" +
    "\024\024\025\047\026\041\027\045\030\014\031\052\032" +
    "\042\034\072\035\060\036\044\040\013\041\057\042\040" +
    "\043\061\044\070\045\020\053\037\054\uffe6\055\uffe6\057" +
    "\uffe6\060\062\061\055\062\011\001\002\000\072\010\uffe6" +
    "\011\050\013\036\022\035\023\034\024\024\025\047\026" +
    "\041\027\045\030\014\031\052\032\042\034\072\035\060" +
    "\036\044\040\013\041\057\042\040\043\061\044\070\045" +
    "\020\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055" +
    "\062\011\001\002\000\072\010\uffe6\011\050\013\036\022" +
    "\035\023\034\024\024\025\047\026\041\027\045\030\014" +
    "\031\052\032\042\034\072\035\060\036\044\040\013\041" +
    "\057\042\040\043\061\044\070\045\020\053\037\054\uffe6" +
    "\055\uffe6\057\uffe6\060\062\061\055\062\011\001\002\000" +
    "\072\010\uffe6\011\050\013\036\022\035\023\034\024\024" +
    "\025\047\026\041\027\045\030\014\031\052\032\042\034" +
    "\072\035\060\036\044\040\013\041\057\042\040\043\061" +
    "\044\070\045\020\053\037\054\uffe6\055\uffe6\057\uffe6\060" +
    "\062\061\055\062\011\001\002\000\072\010\uffe6\011\050" +
    "\013\036\022\035\023\034\024\024\025\047\026\041\027" +
    "\045\030\014\031\052\032\042\034\072\035\060\036\044" +
    "\040\013\041\057\042\040\043\061\044\070\045\020\053" +
    "\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055\062\011" +
    "\001\002\000\004\005\077\001\002\000\072\010\uffe6\011" +
    "\050\013\036\022\035\023\034\024\024\025\047\026\041" +
    "\027\045\030\014\031\052\032\042\034\072\035\060\036" +
    "\044\040\013\041\057\042\040\043\061\044\070\045\020" +
    "\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055\062" +
    "\011\001\002\000\004\005\073\001\002\000\004\006\074" +
    "\001\002\000\004\012\075\001\002\000\072\010\uffb4\011" +
    "\uffb4\013\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\001\002\000\012\010\ufff3\054\ufff3\055\ufff3\057\ufff3" +
    "\001\002\000\004\006\100\001\002\000\004\012\101\001" +
    "\002\000\072\010\uffa8\011\uffa8\013\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\053\uffa8\054\uffa8\055\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\001\002\000\012\010\uffef" +
    "\054\uffef\055\uffef\057\uffef\001\002\000\012\010\ufff1\054" +
    "\ufff1\055\ufff1\057\ufff1\001\002\000\012\010\uffed\054\uffed" +
    "\055\uffed\057\uffed\001\002\000\012\010\ufff5\054\ufff5\055" +
    "\ufff5\057\ufff5\001\002\000\012\010\uffee\054\uffee\055\uffee" +
    "\057\uffee\001\002\000\010\011\112\012\uff7d\013\111\001" +
    "\002\000\004\012\174\001\002\000\004\015\114\001\002" +
    "\000\004\013\113\001\002\000\004\015\114\001\002\000" +
    "\012\005\136\013\131\016\127\066\132\001\002\000\006" +
    "\012\uff7a\014\117\001\002\000\004\012\uff7e\001\002\000" +
    "\006\011\121\013\120\001\002\000\004\015\114\001\002" +
    "\000\004\013\122\001\002\000\004\015\114\001\002\000" +
    "\006\012\uff7a\014\117\001\002\000\004\012\uff7b\001\002" +
    "\000\006\012\uff7a\014\117\001\002\000\004\012\uff7c\001" +
    "\002\000\014\012\uffdd\014\uffdd\017\150\020\146\021\145" +
    "\001\002\000\010\006\uffd9\012\uffd9\014\uffd9\001\002\000" +
    "\014\012\uffdc\014\uffdc\017\150\020\146\021\145\001\002" +
    "\000\004\005\164\001\002\000\010\006\uffd8\012\uffd8\014" +
    "\uffd8\001\002\000\014\012\uffdb\014\uffdb\017\150\020\146" +
    "\021\145\001\002\000\006\012\uffda\014\uffda\001\002\000" +
    "\012\005\136\013\140\016\137\066\132\001\002\000\010" +
    "\017\150\020\146\021\145\001\002\000\010\017\150\020" +
    "\146\021\145\001\002\000\010\017\150\020\146\021\145" +
    "\001\002\000\004\006\143\001\002\000\016\006\uffd5\012" +
    "\uffd5\014\uffd5\017\150\020\146\021\145\001\002\000\010" +
    "\006\uffd6\012\uffd6\014\uffd6\001\002\000\012\005\uffca\013" +
    "\uffca\016\uffca\066\uffca\001\002\000\012\005\uffc8\013\uffc8" +
    "\016\uffc8\066\uffc8\001\002\000\010\006\uffd7\012\uffd7\014" +
    "\uffd7\001\002\000\012\005\uffc9\013\uffc9\016\uffc9\066\uffc9" +
    "\001\002\000\012\005\136\013\153\016\152\066\132\001" +
    "\002\000\016\006\uffcc\012\uffcc\014\uffcc\017\150\020\146" +
    "\021\145\001\002\000\016\006\uffcd\012\uffcd\014\uffcd\017" +
    "\150\020\146\021\145\001\002\000\010\006\uffce\012\uffce" +
    "\014\uffce\001\002\000\016\006\uffcb\012\uffcb\014\uffcb\017" +
    "\150\020\146\021\145\001\002\000\010\006\uffcf\012\uffcf" +
    "\014\uffcf\001\002\000\010\006\uffd1\012\uffd1\014\uffd1\001" +
    "\002\000\010\006\uffd0\012\uffd0\014\uffd0\001\002\000\010" +
    "\006\uffd2\012\uffd2\014\uffd2\001\002\000\010\006\uffd4\012" +
    "\uffd4\014\uffd4\001\002\000\010\006\uffd3\012\uffd3\014\uffd3" +
    "\001\002\000\006\006\166\016\165\001\002\000\004\014" +
    "\167\001\002\000\022\006\uffc4\012\uffc4\014\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\047\uffc4\056\uffc4\001\002\000\004\016" +
    "\170\001\002\000\004\006\171\001\002\000\022\006\uffc5" +
    "\012\uffc5\014\uffc5\017\uffc5\020\uffc5\021\uffc5\047\uffc5\056" +
    "\uffc5\001\002\000\006\012\uff7a\014\117\001\002\000\004" +
    "\012\uff7f\001\002\000\016\005\uff6a\013\206\016\200\046" +
    "\176\064\202\066\132\001\002\000\004\047\210\001\002" +
    "\000\006\006\uff95\012\uff95\001\002\000\006\006\uff9a\012" +
    "\uff9a\001\002\000\004\047\210\001\002\000\006\006\uff9b" +
    "\012\uff9b\001\002\000\004\005\uff6b\001\002\000\004\005" +
    "\243\001\002\000\004\012\216\001\002\000\010\006\uff99" +
    "\012\uff99\050\214\001\002\000\004\047\210\001\002\000" +
    "\006\006\uff98\012\uff98\001\002\000\010\013\212\016\211" +
    "\066\132\001\002\000\006\006\uff93\012\uff93\001\002\000" +
    "\006\006\uff94\012\uff94\001\002\000\006\006\uff92\012\uff92" +
    "\001\002\000\006\005\uff6a\064\202\001\002\000\006\006" +
    "\uff90\012\uff90\001\002\000\006\006\uff77\013\220\001\002" +
    "\000\004\006\237\001\002\000\006\017\222\020\221\001" +
    "\002\000\004\020\235\001\002\000\004\017\223\001\002" +
    "\000\006\006\uff74\014\225\001\002\000\004\006\uff79\001" +
    "\002\000\004\013\226\001\002\000\006\017\230\020\227" +
    "\001\002\000\004\020\233\001\002\000\004\017\231\001" +
    "\002\000\006\006\uff74\014\225\001\002\000\004\006\uff76" +
    "\001\002\000\006\006\uff74\014\225\001\002\000\004\006" +
    "\uff75\001\002\000\006\006\uff74\014\225\001\002\000\004" +
    "\006\uff78\001\002\000\004\007\240\001\002\000\064\010" +
    "\uffe6\011\050\013\036\022\035\023\034\024\024\025\047" +
    "\026\041\027\045\030\014\031\052\032\042\034\072\035" +
    "\060\036\044\040\013\041\057\042\040\043\061\044\070" +
    "\045\020\053\037\060\062\061\055\062\011\001\002\000" +
    "\004\010\242\001\002\000\072\010\uff80\011\uff80\013\uff80" +
    "\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\034\uff80\035\uff80\036\uff80\040\uff80" +
    "\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\053\uff80\054" +
    "\uff80\055\uff80\057\uff80\060\uff80\061\uff80\062\uff80\001\002" +
    "\000\012\013\206\016\200\046\176\066\132\001\002\000" +
    "\004\006\245\001\002\000\010\006\uff91\012\uff91\050\uff91" +
    "\001\002\000\006\006\uff97\012\uff97\001\002\000\006\006" +
    "\uff96\012\uff96\001\002\000\004\006\251\001\002\000\004" +
    "\012\252\001\002\000\072\010\uffa9\011\uffa9\013\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\001\002\000" +
    "\004\013\254\001\002\000\004\006\255\001\002\000\004" +
    "\012\256\001\002\000\072\010\uffb3\011\uffb3\013\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000" +
    "\004\006\260\001\002\000\004\012\261\001\002\000\072" +
    "\010\uffab\011\uffab\013\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034\uffab" +
    "\035\uffab\036\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\001\002\000\012\010\ufff0\054\ufff0\055" +
    "\ufff0\057\ufff0\001\002\000\064\010\uffe6\011\050\013\036" +
    "\022\035\023\034\024\024\025\047\026\041\027\045\030" +
    "\014\031\052\032\042\034\072\035\060\036\044\040\013" +
    "\041\057\042\040\043\061\044\070\045\020\053\037\060" +
    "\062\061\055\062\011\001\002\000\004\010\265\001\002" +
    "\000\004\063\266\001\002\000\004\005\267\001\002\000" +
    "\016\005\uff6a\013\206\016\200\046\176\064\202\066\132" +
    "\001\002\000\004\006\271\001\002\000\004\012\272\001" +
    "\002\000\072\010\uff73\011\uff73\013\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032" +
    "\uff73\034\uff73\035\uff73\036\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\045\uff73\053\uff73\054\uff73\055\uff73\057" +
    "\uff73\060\uff73\061\uff73\062\uff73\001\002\000\012\010\ufffc" +
    "\054\ufffc\055\ufffc\057\ufffc\001\002\000\012\010\ufffa\054" +
    "\ufffa\055\ufffa\057\ufffa\001\002\000\004\006\276\001\002" +
    "\000\004\012\277\001\002\000\072\010\uffb8\011\uffb8\013" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\001" +
    "\002\000\012\010\uffec\054\uffec\055\uffec\057\uffec\001\002" +
    "\000\010\012\uffe4\014\304\015\114\001\002\000\004\012" +
    "\303\001\002\000\072\010\uffe5\011\uffe5\013\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\001\002\000\004" +
    "\013\307\001\002\000\004\012\uffe3\001\002\000\004\012" +
    "\uffe2\001\002\000\010\012\uffde\014\304\015\114\001\002" +
    "\000\006\012\uffdf\014\304\001\002\000\004\012\uffe1\001" +
    "\002\000\004\012\uffe0\001\002\000\014\005\136\006\uffbf" +
    "\013\320\016\317\066\132\001\002\000\012\006\uffc1\017" +
    "\150\020\146\021\145\001\002\000\004\006\uffc0\001\002" +
    "\000\004\006\321\001\002\000\012\006\uffc2\017\150\020" +
    "\146\021\145\001\002\000\012\006\uffc3\017\150\020\146" +
    "\021\145\001\002\000\004\012\322\001\002\000\072\010" +
    "\uffbc\011\uffbc\013\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\001\002\000\012\010\ufff9\054\ufff9\055\ufff9" +
    "\057\ufff9\001\002\000\004\006\325\001\002\000\004\012" +
    "\326\001\002\000\072\010\uffba\011\uffba\013\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\034\uffba\035\uffba\036\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\053\uffba\054\uffba\055" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001\002\000\006" +
    "\013\330\037\332\001\002\000\006\006\uffad\017\333\001" +
    "\002\000\004\006\341\001\002\000\006\006\uffad\017\333" +
    "\001\002\000\006\013\335\037\336\001\002\000\004\006" +
    "\uffb0\001\002\000\006\006\uffad\017\333\001\002\000\006" +
    "\006\uffad\017\333\001\002\000\004\006\uffae\001\002\000" +
    "\004\006\uffaf\001\002\000\004\012\342\001\002\000\072" +
    "\010\uffb2\011\uffb2\013\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\053\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\001\002\000\004\006\uffb1\001\002\000" +
    "\012\010\uffea\054\uffea\055\uffea\057\uffea\001\002\000\006" +
    "\006\uffb5\033\346\001\002\000\004\006\uffb6\001\002\000" +
    "\004\006\350\001\002\000\004\012\351\001\002\000\072" +
    "\010\uffb7\011\uffb7\013\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\001\002\000\004\006\353\001\002\000" +
    "\004\012\354\001\002\000\072\010\uffbb\011\uffbb\013\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002" +
    "\000\004\006\356\001\002\000\004\012\357\001\002\000" +
    "\072\010\uffaa\011\uffaa\013\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\053\uffaa\054\uffaa\055\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\001\002\000\004\013\361\001\002" +
    "\000\004\006\362\001\002\000\004\007\363\001\002\000" +
    "\006\054\364\057\uff89\001\002\000\010\016\uff83\047\375" +
    "\066\uff83\001\002\000\004\057\366\001\002\000\004\056" +
    "\371\001\002\000\004\010\370\001\002\000\072\010\uff8b" +
    "\011\uff8b\013\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\001\002\000\066\010\uffe6\011\050\013\036\022" +
    "\035\023\034\024\024\025\047\026\041\027\045\030\014" +
    "\031\052\032\042\034\072\035\060\036\044\040\013\041" +
    "\057\042\040\043\061\044\070\045\020\053\037\055\uffe6" +
    "\060\062\061\055\062\011\001\002\000\006\010\uff81\055" +
    "\373\001\002\000\004\012\374\001\002\000\004\010\uff82" +
    "\001\002\000\006\016\uff84\066\uff84\001\002\000\004\056" +
    "\u0102\001\002\000\006\016\u0100\066\132\001\002\000\004" +
    "\056\uff86\001\002\000\004\056\uff85\001\002\000\070\011" +
    "\050\013\036\022\035\023\034\024\024\025\047\026\041" +
    "\027\045\030\014\031\052\032\042\034\072\035\060\036" +
    "\044\040\013\041\057\042\040\043\061\044\070\045\020" +
    "\053\037\054\uffe6\055\uffe6\057\uffe6\060\062\061\055\062" +
    "\011\001\002\000\010\054\364\055\u0105\057\uff89\001\002" +
    "\000\004\057\uff8a\001\002\000\004\012\u0107\001\002\000" +
    "\004\057\uff87\001\002\000\006\054\364\057\uff89\001\002" +
    "\000\004\057\uff88\001\002\000\004\012\u011f\001\002\000" +
    "\014\005\136\006\uffa2\013\u010f\016\u010d\066\132\001\002" +
    "\000\014\006\uff9d\014\u0110\017\150\020\146\021\145\001" +
    "\002\000\006\006\uff9d\014\u0110\001\002\000\014\006\uff9d" +
    "\014\u0110\017\150\020\146\021\145\001\002\000\004\006" +
    "\u011a\001\002\000\014\006\uff9d\014\u0110\017\150\020\146" +
    "\021\145\001\002\000\012\005\136\013\u0113\016\u0112\066" +
    "\132\001\002\000\004\006\uffa5\001\002\000\014\006\uff9d" +
    "\014\u0110\017\150\020\146\021\145\001\002\000\014\006" +
    "\uff9d\014\u0110\017\150\020\146\021\145\001\002\000\014" +
    "\006\uff9d\014\u0110\017\150\020\146\021\145\001\002\000" +
    "\006\006\uff9d\014\u0110\001\002\000\004\006\uff9e\001\002" +
    "\000\004\006\uff9f\001\002\000\004\006\uffa0\001\002\000" +
    "\004\006\uffa1\001\002\000\004\012\u011b\001\002\000\072" +
    "\010\uffa7\011\uffa7\013\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\053\uffa7\054\uffa7\055\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\001\002\000\004\006\uffa6\001\002\000" +
    "\004\006\uffa3\001\002\000\004\006\uffa4\001\002\000\072" +
    "\010\uffc7\011\uffc7\013\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\062\uffc7\001\002\000\014\005\136\006\uffbf\013" +
    "\320\016\317\066\132\001\002\000\004\006\u0122\001\002" +
    "\000\004\012\u0123\001\002\000\072\010\uffc6\011\uffc6\013" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\036\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\001" +
    "\002\000\014\005\136\006\uffbf\013\320\016\317\066\132" +
    "\001\002\000\004\006\u0126\001\002\000\004\012\u0127\001" +
    "\002\000\072\010\uffbe\011\uffbe\013\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\053\uffbe\054\uffbe\055\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000\012\010\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\001\002\000\012\010\ufffd\054" +
    "\ufffd\055\ufffd\057\ufffd\001\002\000\012\010\uffe9\054\uffe9" +
    "\055\uffe9\057\uffe9\001\002\000\012\010\ufffe\054\ufffe\055" +
    "\ufffe\057\ufffe\001\002\000\012\010\uffeb\054\uffeb\055\uffeb" +
    "\057\uffeb\001\002\000\012\010\ufff8\054\ufff8\055\ufff8\057" +
    "\ufff8\001\002\000\012\010\ufff6\054\ufff6\055\ufff6\057\ufff6" +
    "\001\002\000\014\005\136\006\uffbf\013\320\016\317\066" +
    "\132\001\002\000\004\006\u0131\001\002\000\004\012\u0132" +
    "\001\002\000\072\010\uffbd\011\uffbd\013\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002\000\012\010" +
    "\ufff4\054\ufff4\055\ufff4\057\ufff4\001\002\000\012\010\ufff2" +
    "\054\ufff2\055\ufff2\057\ufff2\001\002\000\012\010\uffff\054" +
    "\uffff\055\uffff\057\uffff\001\002\000\016\005\uff6a\013\206" +
    "\016\200\046\176\064\202\066\132\001\002\000\004\006" +
    "\u0138\001\002\000\004\007\u0139\001\002\000\064\010\uffe6" +
    "\011\050\013\036\022\035\023\034\024\024\025\047\026" +
    "\041\027\045\030\014\031\052\032\042\034\072\035\060" +
    "\036\044\040\013\041\057\042\040\043\061\044\070\045" +
    "\020\053\037\060\062\061\055\062\011\001\002\000\004" +
    "\010\u013b\001\002\000\076\010\uff8c\011\uff8c\013\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\034\uff8c\035\uff8c\036\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\051\u013f\052\u013e" +
    "\053\uff8c\054\uff8c\055\uff8c\057\uff8c\060\uff8c\061\uff8c\062" +
    "\uff8c\001\002\000\072\010\uff9c\011\uff9c\013\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\034\uff9c\035\uff9c\036\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\001\002\000\072" +
    "\010\uff8e\011\uff8e\013\uff8e\022\uff8e\023\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\053\uff8e\054\uff8e\055\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\062\uff8e\001\002\000\004\007\u0147\001\002\000" +
    "\004\005\u0140\001\002\000\016\005\uff6a\013\206\016\200" +
    "\046\176\064\202\066\132\001\002\000\004\006\u0142\001" +
    "\002\000\004\007\u0143\001\002\000\064\010\uffe6\011\050" +
    "\013\036\022\035\023\034\024\024\025\047\026\041\027" +
    "\045\030\014\031\052\032\042\034\072\035\060\036\044" +
    "\040\013\041\057\042\040\043\061\044\070\045\020\053" +
    "\037\060\062\061\055\062\011\001\002\000\004\010\u0145" +
    "\001\002\000\076\010\uff8c\011\uff8c\013\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\034\uff8c\035\uff8c\036\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\051\u013f\052\u013e\053\uff8c" +
    "\054\uff8c\055\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\001" +
    "\002\000\072\010\uff8f\011\uff8f\013\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\053\uff8f\054\uff8f\055\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\001\002\000\064\010\uffe6" +
    "\011\050\013\036\022\035\023\034\024\024\025\047\026" +
    "\041\027\045\030\014\031\052\032\042\034\072\035\060" +
    "\036\044\040\013\041\057\042\040\043\061\044\070\045" +
    "\020\053\037\060\062\061\055\062\011\001\002\000\004" +
    "\010\u0149\001\002\000\072\010\uff8d\011\uff8d\013\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\034\uff8d\035\uff8d\036\uff8d\040\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\053\uff8d\054\uff8d" +
    "\055\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\001\002\000" +
    "\006\002\uff70\013\u014b\001\002\000\004\005\u014d\001\002" +
    "\000\004\002\000\001\002\000\006\006\uff6e\011\u014f\001" +
    "\002\000\004\006\u0156\001\002\000\004\013\u0150\001\002" +
    "\000\006\006\uff6c\014\u0151\001\002\000\004\011\u0153\001" +
    "\002\000\004\006\uff6f\001\002\000\004\013\u0154\001\002" +
    "\000\006\006\uff6c\014\u0151\001\002\000\004\006\uff6d\001" +
    "\002\000\004\007\u0157\001\002\000\064\010\uffe6\011\050" +
    "\013\036\022\035\023\034\024\024\025\047\026\041\027" +
    "\045\030\014\031\052\032\042\034\072\035\060\036\044" +
    "\040\013\041\057\042\040\043\061\044\070\045\020\053" +
    "\037\060\062\061\055\062\011\001\002\000\004\010\u0159" +
    "\001\002\000\006\002\uff70\013\u014b\001\002\000\004\002" +
    "\uff71\001\002\000\012\010\uffe7\054\uffe7\055\uffe7\057\uffe7" +
    "\001\002\000\012\010\uffe8\054\uffe8\055\uffe8\057\uffe8\001" +
    "\002\000\004\006\u015e\001\002\000\004\012\u015f\001\002" +
    "\000\072\010\uffb9\011\uffb9\013\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\001\002\000\004\006\u0161\001" +
    "\002\000\004\012\u0162\001\002\000\072\010\uffac\011\uffac" +
    "\013\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\034\uffac\035\uffac\036\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\053" +
    "\uffac\054\uffac\055\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\001\002\000\012\010\ufff7\054\ufff7\055\ufff7\057\ufff7\001" +
    "\002\000\016\005\uff6a\013\206\016\200\046\176\064\202" +
    "\066\132\001\002\000\004\006\u0166\001\002\000\004\007" +
    "\u0167\001\002\000\064\010\uffe6\011\050\013\036\022\035" +
    "\023\034\024\024\025\047\026\041\027\045\030\014\031" +
    "\052\032\042\034\072\035\060\036\044\040\013\041\057" +
    "\042\040\043\061\044\070\045\020\053\037\060\062\061" +
    "\055\062\011\001\002\000\004\010\u0169\001\002\000\072" +
    "\010\uff72\011\uff72\013\uff72\022\uff72\023\uff72\024\uff72\025" +
    "\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\034\uff72" +
    "\035\uff72\036\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044" +
    "\uff72\045\uff72\053\uff72\054\uff72\055\uff72\057\uff72\060\uff72" +
    "\061\uff72\062\uff72\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0168\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\003\016\004\020\014\027\015\031\017\053\020\032\021" +
    "\052\022\045\023\025\024\011\025\024\026\063\030\022" +
    "\031\070\032\021\035\065\036\055\037\066\040\062\041" +
    "\064\042\015\045\050\055\026\060\042\065\030\066\014" +
    "\001\001\000\002\001\001\000\066\003\u0162\004\020\014" +
    "\027\015\031\017\053\020\032\021\052\022\045\023\025" +
    "\024\011\025\024\026\063\030\022\031\070\032\021\035" +
    "\065\036\055\037\066\040\062\041\064\042\015\045\050" +
    "\055\026\060\042\065\030\066\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\003\u015b\004\020\014\027" +
    "\015\031\017\053\020\032\021\052\022\045\023\025\024" +
    "\011\025\024\026\063\030\022\031\070\032\021\035\065" +
    "\036\055\037\066\040\062\041\064\042\015\045\050\055" +
    "\026\060\042\065\030\066\014\001\001\000\066\003\u015a" +
    "\004\020\014\027\015\031\017\053\020\032\021\052\022" +
    "\045\023\025\024\011\025\024\026\063\030\022\031\070" +
    "\032\021\035\065\036\055\037\066\040\062\041\064\042" +
    "\015\045\050\055\026\060\042\065\030\066\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\u0134\004" +
    "\020\014\027\015\031\017\053\020\032\021\052\022\045" +
    "\023\025\024\011\025\024\026\063\030\022\031\070\032" +
    "\021\035\065\036\055\037\066\040\062\041\064\042\015" +
    "\045\050\055\026\060\042\065\030\066\014\001\001\000" +
    "\066\003\u0133\004\020\014\027\015\031\017\053\020\032" +
    "\021\052\022\045\023\025\024\011\025\024\026\063\030" +
    "\022\031\070\032\021\035\065\036\055\037\066\040\062" +
    "\041\064\042\015\045\050\055\026\060\042\065\030\066" +
    "\014\001\001\000\066\003\u0132\004\020\014\027\015\031" +
    "\017\053\020\032\021\052\022\045\023\025\024\011\025" +
    "\024\026\063\030\022\031\070\032\021\035\065\036\055" +
    "\037\066\040\062\041\064\042\015\045\050\055\026\060" +
    "\042\065\030\066\014\001\001\000\002\001\001\000\066" +
    "\003\u012d\004\020\014\027\015\031\017\053\020\032\021" +
    "\052\022\045\023\025\024\011\025\024\026\063\030\022" +
    "\031\070\032\021\035\065\036\055\037\066\040\062\041" +
    "\064\042\015\045\050\055\026\060\042\065\030\066\014" +
    "\001\001\000\066\003\u012c\004\020\014\027\015\031\017" +
    "\053\020\032\021\052\022\045\023\025\024\011\025\024" +
    "\026\063\030\022\031\070\032\021\035\065\036\055\037" +
    "\066\040\062\041\064\042\015\045\050\055\026\060\042" +
    "\065\030\066\014\001\001\000\066\003\u012b\004\020\014" +
    "\027\015\031\017\053\020\032\021\052\022\045\023\025" +
    "\024\011\025\024\026\063\030\022\031\070\032\021\035" +
    "\065\036\055\037\066\040\062\041\064\042\015\045\050" +
    "\055\026\060\042\065\030\066\014\001\001\000\066\003" +
    "\u012a\004\020\014\027\015\031\017\053\020\032\021\052" +
    "\022\045\023\025\024\011\025\024\026\063\030\022\031" +
    "\070\032\021\035\065\036\055\037\066\040\062\041\064" +
    "\042\015\045\050\055\026\060\042\065\030\066\014\001" +
    "\001\000\066\003\u0129\004\020\014\027\015\031\017\053" +
    "\020\032\021\052\022\045\023\025\024\011\025\024\026" +
    "\063\030\022\031\070\032\021\035\065\036\055\037\066" +
    "\040\062\041\064\042\015\045\050\055\026\060\042\065" +
    "\030\066\014\001\001\000\066\003\u0128\004\020\014\027" +
    "\015\031\017\053\020\032\021\052\022\045\023\025\024" +
    "\011\025\024\026\063\030\022\031\070\032\021\035\065" +
    "\036\055\037\066\040\062\041\064\042\015\045\050\055" +
    "\026\060\042\065\030\066\014\001\001\000\066\003\u0127" +
    "\004\020\014\027\015\031\017\053\020\032\021\052\022" +
    "\045\023\025\024\011\025\024\026\063\030\022\031\070" +
    "\032\021\035\065\036\055\037\066\040\062\041\064\042" +
    "\015\045\050\055\026\060\042\065\030\066\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\343\004\020\014\027\015" +
    "\031\017\053\020\032\021\052\022\045\023\025\024\011" +
    "\025\024\026\063\030\022\031\070\032\021\035\065\036" +
    "\055\037\066\040\062\041\064\042\015\045\050\055\026" +
    "\060\042\065\030\066\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\003\322\004\020\014\027\015\031" +
    "\017\053\020\032\021\052\022\045\023\025\024\011\025" +
    "\024\026\063\030\022\031\070\032\021\035\065\036\055" +
    "\037\066\040\062\041\064\042\015\045\050\055\026\060" +
    "\042\065\030\066\014\001\001\000\002\001\001\000\004" +
    "\005\301\001\001\000\066\003\277\004\020\014\027\015" +
    "\031\017\053\020\032\021\052\022\045\023\025\024\011" +
    "\025\024\026\063\030\022\031\070\032\021\035\065\036" +
    "\055\037\066\040\062\041\064\042\015\045\050\055\026" +
    "\060\042\065\030\066\014\001\001\000\002\001\001\000" +
    "\066\003\273\004\020\014\027\015\031\017\053\020\032" +
    "\021\052\022\045\023\025\024\011\025\024\026\063\030" +
    "\022\031\070\032\021\035\065\036\055\037\066\040\062" +
    "\041\064\042\015\045\050\055\026\060\042\065\030\066" +
    "\014\001\001\000\066\003\272\004\020\014\027\015\031" +
    "\017\053\020\032\021\052\022\045\023\025\024\011\025" +
    "\024\026\063\030\022\031\070\032\021\035\065\036\055" +
    "\037\066\040\062\041\064\042\015\045\050\055\026\060" +
    "\042\065\030\066\014\001\001\000\002\001\001\000\066" +
    "\003\261\004\020\014\027\015\031\017\053\020\032\021" +
    "\052\022\045\023\025\024\011\025\024\026\063\030\022" +
    "\031\070\032\021\035\065\036\055\037\066\040\062\041" +
    "\064\042\015\045\050\055\026\060\042\065\030\066\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\003\105\004\020\014\027" +
    "\015\031\017\053\020\032\021\052\022\045\023\025\024" +
    "\011\025\024\026\063\030\022\031\070\032\021\035\065" +
    "\036\055\037\066\040\062\041\064\042\015\045\050\055" +
    "\026\060\042\065\030\066\014\001\001\000\066\003\104" +
    "\004\020\014\027\015\031\017\053\020\032\021\052\022" +
    "\045\023\025\024\011\025\024\026\063\030\022\031\070" +
    "\032\021\035\065\036\055\037\066\040\062\041\064\042" +
    "\015\045\050\055\026\060\042\065\030\066\014\001\001" +
    "\000\066\003\103\004\020\014\027\015\031\017\053\020" +
    "\032\021\052\022\045\023\025\024\011\025\024\026\063" +
    "\030\022\031\070\032\021\035\065\036\055\037\066\040" +
    "\062\041\064\042\015\045\050\055\026\060\042\065\030" +
    "\066\014\001\001\000\066\003\102\004\020\014\027\015" +
    "\031\017\053\020\032\021\052\022\045\023\025\024\011" +
    "\025\024\026\063\030\022\031\070\032\021\035\065\036" +
    "\055\037\066\040\062\041\064\042\015\045\050\055\026" +
    "\060\042\065\030\066\014\001\001\000\066\003\101\004" +
    "\020\014\027\015\031\017\053\020\032\021\052\022\045" +
    "\023\025\024\011\025\024\026\063\030\022\031\070\032" +
    "\021\035\065\036\055\037\066\040\062\041\064\042\015" +
    "\045\050\055\026\060\042\065\030\066\014\001\001\000" +
    "\002\001\001\000\066\003\075\004\020\014\027\015\031" +
    "\017\053\020\032\021\052\022\045\023\025\024\011\025" +
    "\024\026\063\030\022\031\070\032\021\035\065\036\055" +
    "\037\066\040\062\041\064\042\015\045\050\055\026\060" +
    "\042\065\030\066\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\107\001\001" +
    "\000\002\001\001\000\004\007\171\001\001\000\002\001" +
    "\001\000\004\007\114\001\001\000\012\010\134\011\127" +
    "\073\132\075\133\001\001\000\004\062\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\124\001\001" +
    "\000\002\001\001\000\004\007\122\001\001\000\004\062" +
    "\123\001\001\000\002\001\001\000\004\062\125\001\001" +
    "\000\002\001\001\000\006\012\162\013\150\001\001\000" +
    "\002\001\001\000\006\012\161\013\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\160\013\150\001" +
    "\001\000\002\001\001\000\012\010\141\011\127\073\132" +
    "\075\140\001\001\000\006\012\162\013\150\001\001\000" +
    "\006\012\161\013\150\001\001\000\006\012\160\013\150" +
    "\001\001\000\002\001\001\000\010\012\143\013\150\074" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\153\075\154\001\001\000\006\012\157\013\150\001\001" +
    "\000\006\012\156\013\150\001\001\000\002\001\001\000" +
    "\006\012\155\013\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\172\001\001\000\002\001\001" +
    "\000\016\046\203\047\200\051\204\052\176\072\202\075" +
    "\174\001\001\000\004\050\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\206\001\001\000\002\001" +
    "\001\000\004\075\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\214\072\202\001" +
    "\001\000\002\001\001\000\004\063\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\231\001\001\000\002\001\001\000\004" +
    "\064\233\001\001\000\002\001\001\000\004\064\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\003\240" +
    "\004\020\014\027\015\031\017\053\020\032\021\052\022" +
    "\045\023\025\024\011\025\024\026\063\030\022\031\070" +
    "\032\021\035\065\036\055\037\066\040\062\041\064\042" +
    "\015\045\050\055\026\060\042\065\030\066\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\243\075" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\003\263\004\020\014\027\015\031\017\053\020\032\021" +
    "\052\022\045\023\025\024\011\025\024\026\063\030\022" +
    "\031\070\032\021\035\065\036\055\037\066\040\062\041" +
    "\064\042\015\045\050\055\026\060\042\065\030\066\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\046\267\047\200\051\204\052\176\072\202" +
    "\075\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\305\007\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\310\007\307\001\001\000\004" +
    "\006\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\314\011\127\016\315\073\132\075\313\001\001" +
    "\000\006\012\160\013\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\162\013\150\001\001\000\006" +
    "\012\161\013\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\330\001\001\000\004\034" +
    "\342\001\001\000\002\001\001\000\004\034\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\337\001" +
    "\001\000\004\034\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\364\001\001\000\006\076\375\077\376\001\001\000" +
    "\004\057\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\371\004\020\014\027\015" +
    "\031\017\053\020\032\021\052\022\045\023\025\024\011" +
    "\025\024\026\063\030\022\031\070\032\021\035\065\036" +
    "\055\037\066\040\062\041\064\042\015\045\050\055\026" +
    "\060\042\065\030\066\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\003\u0102\004\020\014\027\015\031" +
    "\017\053\020\032\021\052\022\045\023\025\024\011\025" +
    "\024\026\063\030\022\031\070\032\021\035\065\036\055" +
    "\037\066\040\062\041\064\042\015\045\050\055\026\060" +
    "\042\065\030\066\014\100\u0103\001\001\000\004\056\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\u010b\011\127\043\u010d\073\132\075" +
    "\u010a\001\001\000\010\012\160\013\150\044\u011d\001\001" +
    "\000\004\044\u011c\001\001\000\010\012\162\013\150\044" +
    "\u011b\001\001\000\002\001\001\000\010\012\161\013\150" +
    "\044\u0110\001\001\000\012\010\u0114\011\127\073\132\075" +
    "\u0113\001\001\000\002\001\001\000\010\012\162\013\150" +
    "\044\u0118\001\001\000\010\012\161\013\150\044\u0117\001" +
    "\001\000\010\012\160\013\150\044\u0116\001\001\000\004" +
    "\044\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\314\011\127\016\u0120" +
    "\073\132\075\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\314\011\127\016\u0124" +
    "\073\132\075\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\314\011\127" +
    "\016\u012f\073\132\075\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\046\u0136\047\200\051" +
    "\204\052\176\072\202\075\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\u0139\004\020\014\027\015" +
    "\031\017\053\020\032\021\052\022\045\023\025\024\011" +
    "\025\024\026\063\030\022\031\070\032\021\035\065\036" +
    "\055\037\066\040\062\041\064\042\015\045\050\055\026" +
    "\060\042\065\030\066\014\001\001\000\002\001\001\000" +
    "\006\053\u013b\054\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\046" +
    "\u0140\047\200\051\204\052\176\072\202\075\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\u0143\004" +
    "\020\014\027\015\031\017\053\020\032\021\052\022\045" +
    "\023\025\024\011\025\024\026\063\030\022\031\070\032" +
    "\021\035\065\036\055\037\066\040\062\041\064\042\015" +
    "\045\050\055\026\060\042\065\030\066\014\001\001\000" +
    "\002\001\001\000\006\053\u0145\054\u013c\001\001\000\002" +
    "\001\001\000\066\003\u0147\004\020\014\027\015\031\017" +
    "\053\020\032\021\052\022\045\023\025\024\011\025\024" +
    "\026\063\030\022\031\070\032\021\035\065\036\055\037" +
    "\066\040\062\041\064\042\015\045\050\055\026\060\042" +
    "\065\030\066\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u0151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\003\u0157" +
    "\004\020\014\027\015\031\017\053\020\032\021\052\022" +
    "\045\023\025\024\011\025\024\026\063\030\022\031\070" +
    "\032\021\035\065\036\055\037\066\040\062\041\064\042" +
    "\015\045\050\055\026\060\042\065\030\066\014\001\001" +
    "\000\002\001\001\000\004\067\u0159\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\046\u0164\047\200\051\204\052\176\072\202\075\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\003\u0167" +
    "\004\020\014\027\015\031\017\053\020\032\021\052\022" +
    "\045\023\025\024\011\025\024\026\063\030\022\031\070" +
    "\032\021\035\065\036\055\037\066\040\062\041\064\042" +
    "\015\045\050\055\026\060\042\065\030\066\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol simbolo;

	private JSONObject resultadoJSON;
	private JSONObject resultadoJSONTemporal;

	private Stack identificadorDeInstrucciones = new Stack();
	private Stack instruccionesParaLoop = new Stack();

    public JSONObject getResultadoJSON() {
        return resultadoJSON;
    }

    public void syntax_error(Symbol simbolo){
        this.simbolo = simbolo;
    }

    public Symbol getSimbolo(){
        return this.simbolo;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= PROGRAMA PARENTESISABRE PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones LLAVECIERRA Funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BloqueDeInstrucciones ::= InstruccionDeclaracionDeVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueDeInstrucciones ::= InstruccionModificacionDeValorDeVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueDeInstrucciones ::= InstruccionAvanzar BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueDeInstrucciones ::= InstruccionEspera BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueDeInstrucciones ::= InstruccionGirarALaIzquierda BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BloqueDeInstrucciones ::= InstruccionGirarALaDerecha BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BloqueDeInstrucciones ::= InstruccionTomarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueDeInstrucciones ::= InstruccionSoltarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueDeInstrucciones ::= InstruccionEliminarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueDeInstrucciones ::= InstruccionDesactivarKaboom BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueDeInstrucciones ::= InstruccionPintarSuelo BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueDeInstrucciones ::= InstruccionDejarDePintarSuelo BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueDeInstrucciones ::= InstruccionImprimirVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueDeInstrucciones ::= InstruccionImprimirCadenas BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BloqueDeInstrucciones ::= InstruccionTengoObjetoDelante BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BloqueDeInstrucciones ::= InstruccionTengoBombaDelante BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BloqueDeInstrucciones ::= InstruccionQueTengoDelanteDeMi BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BloqueDeInstrucciones ::= TengoMuroDelanteDeMi BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BloqueDeInstrucciones ::= InstruccionTerminarBloque BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BloqueDeInstrucciones ::= EstrucutraDeControlIf BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BloqueDeInstrucciones ::= EstrucutraDeControlCase BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BloqueDeInstrucciones ::= EstrucutraDeControlFor BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BloqueDeInstrucciones ::= EstrucutraDeControlDoWhile BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BloqueDeInstrucciones ::= EstrucutraDeControlWhile BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BloqueDeInstrucciones ::= LlamadaAFuncion BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BloqueDeInstrucciones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // InstruccionDeclaracionDeVariables ::= VARIABLE DeclaracionDeVariables PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDeclaracionDeVariables",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DeclaracionDeVariables ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DeclaracionDeVariables ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DeclaracionDeVariables ::= IDENTIFICADOR MultiplesDeclaraciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR MultiplesDeclaraciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable MultiplesDeclaraciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION NumeroAleatorio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION OperacionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OperacionAritmetica ::= OperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OperacionAritmetica ::= OperacionConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OperacionConParentesis ::= PARENTESISABRE OperacionAritmetica PARENTESISCIERRA continuaOperacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionConParentesis",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // continuaOperacion ::= ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("continuaOperacion",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // continuaOperacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("continuaOperacion",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OperacionSinParentesis ::= IDENTIFICADOR ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OperacionSinParentesis ::= NUMERO ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OperacionSinParentesis ::= NumeroAleatorio ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos IDENTIFICADOR ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NUMERO ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NumeroAleatorio ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos OperacionConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NumeroAleatorio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OperadoresAritmeticos ::= OPERADORARITMETICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OperadoresAritmeticos ::= OPERADORARITMETICOSUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperadoresAritmeticos ::= OPERADORARITMETICORESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InstruccionModificacionDeValorDeVariables ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionModificacionDeValorDeVariables",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InstruccionAvanzar ::= AVANZAR PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionAvanzar",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NumeroAleatorio ::= RANDOM PARENTESISABRE NUMERO SEPARADOR NUMERO PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumeroAleatorio",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NumeroAleatorio ::= RANDOM PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumeroAleatorio",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ParametrosDeEntradaDeUnaInstruccion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ParametrosDeEntradaDeUnaInstruccion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ParametrosDeEntradaDeUnaInstruccion ::= NumeroAleatorio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ParametrosDeEntradaDeUnaInstruccion ::= OperacionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ParametrosDeEntradaDeUnaInstruccion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InstruccionEspera ::= ESPERA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionEspera",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // InstruccionGirarALaIzquierda ::= IZQUIERDA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionGirarALaIzquierda",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // InstruccionGirarALaDerecha ::= DERECHA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionGirarALaDerecha",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InstruccionTomarObjeto ::= TOMAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTomarObjeto",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InstruccionSoltarObjeto ::= SOLTAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionSoltarObjeto",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // InstruccionEliminarObjeto ::= ELIMINAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionEliminarObjeto",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // InstruccionDesactivarKaboom ::= DESACTIVARKABOOM PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDesactivarKaboom",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // InstruccionPintarSuelo ::= PINTAR PARENTESISABRE PaletaDeColores PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionPintarSuelo",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PaletaDeColores ::= COLORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PaletaDeColores",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PaletaDeColores ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PaletaDeColores",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // InstruccionDejarDePintarSuelo ::= DEJAPINTAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDejarDePintarSuelo",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // InstruccionImprimirVariables ::= IMPRIMIRVARIABLE PARENTESISABRE IDENTIFICADOR PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionImprimirVariables",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // InstruccionImprimirCadenas ::= IMPRIMIRCADENA PARENTESISABRE Cadenas PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionImprimirCadenas",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Cadenas ::= IDENTIFICADOR ContinuacionDeCadenas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Cadenas",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Cadenas ::= CADENA ContinuacionDeCadenas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Cadenas",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ContinuacionDeCadenas ::= OPERADORARITMETICOSUMA IDENTIFICADOR ContinuacionDeCadenas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ContinuacionDeCadenas ::= OPERADORARITMETICOSUMA CADENA ContinuacionDeCadenas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ContinuacionDeCadenas ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // InstruccionTengoObjetoDelante ::= OBJETODELANTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTengoObjetoDelante",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // InstruccionTengoBombaDelante ::= KABOOMDEFRENTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTengoBombaDelante",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // InstruccionQueTengoDelanteDeMi ::= QUETENGODELANTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionQueTengoDelanteDeMi",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TengoMuroDelanteDeMi ::= MURODELANTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TengoMuroDelanteDeMi",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // InstruccionTerminarBloque ::= TERMINARBLOQUE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTerminarBloque",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LlamadaAFuncion ::= IDENTIFICADOR PARENTESISABRE Parametros PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamadaAFuncion",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Parametros ::= NUMERO ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Parametros ::= IDENTIFICADOR ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Parametros ::= NumeroAleatorio ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Parametros ::= OperacionAritmetica ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ParametrosContinuacion ::= SEPARADOR NUMERO ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ParametrosContinuacion ::= SEPARADOR IDENTIFICADOR ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ParametrosContinuacion ::= SEPARADOR NumeroAleatorio ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ParametrosContinuacion ::= SEPARADOR OperacionAritmetica ParametrosContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ParametrosContinuacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EstrucutraDeControlIf ::= SI PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones LLAVECIERRA EstrucutraDeControlIfElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIf",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Condicion ::= CondicionDeComparacionSimple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Condicion ::= CondicionLogica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Condicion ::= CondicionDeComparacionConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CondicionDeComparacionSimple ::= IDENTIFICADOR CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CondicionDeComparacionSimple ::= NUMERO CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CondicionDeComparacionSimple ::= NumeroAleatorio CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CondicionDeComparacionSimple ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION NumeroAleatorio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CondicionDeComparacionConParentesis ::= OperadorNegacion PARENTESISABRE CondicionDeComparacionSimple PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionConParentesis",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CondicionLogica ::= CondicionDeComparacionConParentesis OPERADORLOGICO CondicionDeComparacionConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionLogica",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EstrucutraDeControlIfElse ::= SINOSI PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones LLAVECIERRA EstrucutraDeControlIfElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIfElse",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EstrucutraDeControlIfElse ::= EstrucutraDeControlElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIfElse",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EstrucutraDeControlElse ::= SINO LLAVEABRE BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlElse",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EstrucutraDeControlElse ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlElse",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EstrucutraDeControlCase ::= COMPARAR PARENTESISABRE IDENTIFICADOR PARENTESISCIERRA LLAVEABRE Casos CasoDefault LLAVECIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlCase",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Casos ::= CASO CondicionParaCasos DOSPUNTOS InstruccionesCasos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Casos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Casos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Casos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // InstruccionesCasos ::= BloqueDeInstrucciones FIN PUNTOYCOMA Casos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesCasos",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // InstruccionesCasos ::= BloqueDeInstrucciones Casos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesCasos",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CondicionParaCasos ::= OperadorDeComparacionOpcional NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionParaCasos",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CondicionParaCasos ::= OperadorDeComparacionOpcional NumeroAleatorio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionParaCasos",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadorDeComparacionOpcional ::= OPERADORDECOMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorDeComparacionOpcional",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadorDeComparacionOpcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorDeComparacionOpcional",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CasoDefault ::= DEFAULT DOSPUNTOS BloqueDeInstrucciones FIN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CasoDefault",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CasoDefault ::= DEFAULT DOSPUNTOS BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CasoDefault",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EstrucutraDeControlFor ::= PARA PARENTESISABRE DeclaracionesParaFor PUNTOYCOMA Condicion PUNTOYCOMA InstruccionesParaFor PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlFor",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DeclaracionesParaFor ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DeclaracionesParaFor ::= VARIABLE IDENTIFICADOR AsignacionDeValoresAlDeclararVariable DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DeclaracionesParaFor ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DeclaracionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DeclaracionesParaForContinuacion ::= SEPARADOR VARIABLE IDENTIFICADOR AsignacionDeValoresAlDeclararVariable DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DeclaracionesParaForContinuacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // InstruccionesParaFor ::= IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA InstruccionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // InstruccionesParaFor ::= IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA InstruccionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // InstruccionesParaFor ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // InstruccionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA InstruccionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // InstruccionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA InstruccionesParaForContinuacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // InstruccionesParaForContinuacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EstrucutraDeControlDoWhile ::= HACER LLAVEABRE BloqueDeInstrucciones LLAVECIERRA REPITE PARENTESISABRE Condicion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlDoWhile",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EstrucutraDeControlWhile ::= REPITEHASTA PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlWhile",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Funciones ::= IDENTIFICADOR PARENTESISABRE ParametrosDeEntrada PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones LLAVECIERRA Funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Funciones",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Funciones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Funciones",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ParametrosDeEntrada ::= VARIABLE IDENTIFICADOR MasParametrosDeEntrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntrada",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ParametrosDeEntrada ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntrada",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MasParametrosDeEntrada ::= SEPARADOR VARIABLE IDENTIFICADOR MasParametrosDeEntrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosDeEntrada",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MasParametrosDeEntrada ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosDeEntrada",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OperadorNegacion ::= OPERADORNEGACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorNegacion",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OperadorNegacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorNegacion",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
